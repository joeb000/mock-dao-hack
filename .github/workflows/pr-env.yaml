name: Update PR environment

on:
  pull_request:
    types: [opened, synchronize, closed]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  createGithubEnvironment:
    if: github.event_name == 'pull_request' && contains(fromJSON('["opened", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
      - name: Check out the repo üõéÔ∏è
        uses: actions/checkout@v4

      - name: Add default Github environment variables and secrets
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
          PR_ID: PR_${{ github.event.pull_request.number }}
        run: |
          gh variable set require_db_branch --env ${PR_ID} --body "false"
          gh secret set DB_URL --env ${PR_ID} --body "$SHELL"

  testGithubEnvironment:
    if: always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [createGithubEnvironment]
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
      - name: Check out the repo üõéÔ∏è
        uses: actions/checkout@v4

      - name: Reference Github environment variable
        run: |
          echo "${{ vars.require_db_branch }}"

      - name: Reference secret
        run: |
          echo "${{ secrets.DB_URL }}"
          if [ "${{ secrets.DB_URL }}" = "$SHELL" ]; then
            echo "Same"
          else
            echo "Different"
          fi

      - name: Update Github environment variable
        id: update_environment_variable
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
          PR_ID: PR_${{ github.event.pull_request.number }}
        run: |
          # Invert REQUIRE_DB_BRANCH
          if [ "${{ vars.require_db_branch }}" = "true" ]; then
            REQUIRE_DB_BRANCH=false
          else
            REQUIRE_DB_BRANCH=true
          fi
          # Push the new variable back to the deployment environment
          gh variable set require_db_branch --env ${PR_ID} --body "$REQUIRE_DB_BRANCH"
          # Allow subsequent steps to access this updated value
          echo "require_db_branch=$REQUIRE_DB_BRANCH" >> $GITHUB_OUTPUT

      - name: Reference updated variable
        run: |
          # This is a pitfall... You need to reference the previous step output rather than the environment.
          # echo "${{ vars.require_db_branch }}"
          echo "${{ steps.update_environment_variable.outputs.require_db_branch }}"

  destroyGithubEnvironment:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Cleanup PR environment
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
          PR_ID: PR_${{ github.event.pull_request.number }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/environments/${PR_ID}

  createGithubArtifact:
    if: github.event_name == 'pull_request' && contains(fromJSON('["opened", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    steps:
      - name: Add default Github artifact variables and secrets
        run: |
          touch .env.artifact
          echo REQUIRE_ANOTHER_DB_RESET="false" >> .env.artifact
          echo SEMI_SECRET_VALUE="semi-secret" >> .env.artifact

      - name: Upload Github artifact variables
        env:
          PR_ID: PR_${{ github.event.pull_request.number }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          path: .env.artifact

  testGithubArtifact:
    if: always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [createGithubArtifact]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Determine the run-id of the last workflow run
        id: get_last_workflow_run_id
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
          PR_ID: PR_${{ github.event.pull_request.number }}
        run: |
          LAST_WORKFLOW_RUN=$(gh run list -b ${{ github.head_ref }} -s completed -L 1 --json databaseId -q ".[].databaseId")
          echo "last_workflow_run=$LAST_WORKFLOW_RUN" >> $GITHUB_OUTPUT

      - name: Download Github artifact variables
        env:
          PR_ID: PR_${{ github.event.pull_request.number }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          run-id: ${{ steps.get_last_workflow_run_id.outputs.last_workflow_run }}

      - name: Read downloaded Github artifact
        uses: falti/dotenv-action@v1.0.4
        with:
          path: .env.artifact

      - name: Reference Github artifact variable
        run: |
          echo "${{ env.REQUIRE_ANOTHER_DB_RESET }}"

      - name: Update Github artifact variable
        id: update_artifact_variable
        run: |
          # Invert REQUIRE_ANOTHER_DB_RESET
          if [ "${{ env.REQUIRE_ANOTHER_DB_RESET }}" = "true" ]; then
            REQUIRE_ANOTHER_DB_RESET=false
          else
            REQUIRE_ANOTHER_DB_RESET=true
          fi
          # Push the new variable back to the .env.artifact
          # By deleting the existing entry (if there is one)
          sed -e /REQUIRE_ANOTHER_DB_RESET/d .env.artifact > tmpfile && mv tmpfile .env.artifact
          # ..and re-adding the updated value
          echo "REQUIRE_ANOTHER_DB_RESET=$REQUIRE_ANOTHER_DB_RESET" >> .env.artifact
          # Allow subsequent steps to access this updated value
          echo "require_another_db_reset=$REQUIRE_ANOTHER_DB_RESET" >> $GITHUB_OUTPUT

      - name: Upload Github artifact variables
        env:
          PR_ID: PR_${{ github.event.pull_request.number }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          path: .env.artifact

  destroyGithubArtifact:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Cleanup PR environment
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
          PR_ID: PR_${{ github.event.pull_request.number }}
        run: |
          gh cache delete ${{ env.PR_ID }}_env

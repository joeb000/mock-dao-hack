name: Update PR environment

on:
  pull_request:
    types: [opened, synchronize, closed]

env:
  PR_ID: PR_${{ github.event.pull_request.number }}

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  createGithubEnvironment:
    if: github.event_name == 'pull_request' && contains(fromJSON('["opened", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
      - name: Check out the repo 🛎️
        uses: actions/checkout@v4

      - name: Add default Github environment variables and secrets
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          gh variable set require_db_branch --env ${{ env.PR_ID }} --body "false"
          gh secret set DB_URL --env ${{ env.PR_ID }} --body "$SHELL"

  testGithubEnvironment:
    if: always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [createGithubEnvironment]
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
      - name: Check out the repo 🛎️
        uses: actions/checkout@v4

      - name: Reference Github environment variable
        run: |
          echo "${{ vars.require_db_branch }}"

      - name: Reference secret
        run: |
          echo "${{ secrets.DB_URL }}"
          if [ "${{ secrets.DB_URL }}" = "$SHELL" ]; then
            echo "Same"
          else
            echo "Different"
          fi

      - name: Update Github environment variable
        id: update_environment_variable
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          # Invert REQUIRE_DB_BRANCH
          if [ "${{ vars.require_db_branch }}" = "true" ]; then
            REQUIRE_DB_BRANCH=false
          else
            REQUIRE_DB_BRANCH=true
          fi
          # Push the new variable back to the deployment environment
          gh variable set require_db_branch --env ${{ env.PR_ID }} --body "$REQUIRE_DB_BRANCH"
          # Allow subsequent steps to access this updated value
          echo "require_db_branch=$REQUIRE_DB_BRANCH" >> $GITHUB_OUTPUT

      - name: Reference updated variable
        run: |
          # This is a pitfall... You need to reference the previous step output rather than the environment.
          # echo "${{ vars.require_db_branch }}"
          echo "${{ steps.update_environment_variable.outputs.require_db_branch }}"

      - name: Another method to update Github environment variable?
        run: |
          # Only updates the local `env`
          echo "does_this_work=yes" >> $GITHUB_ENV

      - name: Reference variable updated by another method
        run: |
          echo "${{ env.does_this_work }}"

      - name: Use $GITHUB_ENV to update the Github environment
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          # Create a .env file from the Github env, but filter out the secret GH_TOKEN.
          for s in $(echo '${{ toJSON(env) }}' | jq -r 'del(.GH_TOKEN)|to_entries|map("\(.key)=\(.value|tostring)")|.[]' ); do
            echo $s >> .github_env
          done
          gh variable set --env ${{ env.PR_ID }} --env-file .github_env

  testSecondJobGithubEnvironment:
    if: always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [testGithubEnvironment]
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
      - name: Reference Github environment variable
        run: |
          echo "${{ vars.does_this_work }}"

      - name: Invert another Github environment variable
        run: |
          # Invert INVERTABLE_TEST
          if [ "${{ vars.invertable_test }}" = "true" ]; then
            INVERTABLE_TEST=false
          else
            INVERTABLE_TEST=true
          fi
          # Allow subsequent steps to access this updated value
          echo "invertable_test=$INVERTABLE_TEST" >> $GITHUB_ENV

      - name: Reference Github environment variable
        run: |
          echo "${{ env.invertable_test }}"

      - name: Use $GITHUB_ENV to update the Github environment
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          # Create a .env file from the Github env, but filter out the secret GH_TOKEN.
          for s in $(echo '${{ toJSON(env) }}' | jq -r 'del(.GH_TOKEN)|to_entries|map("\(.key)=\(.value|tostring)")|.[]' ); do
            echo $s >> .github_env
          done
          gh variable set --env ${{ env.PR_ID }} --env-file .github_env

  destroyGithubEnvironment:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Cleanup PR environment
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/environments/${{ env.PR_ID }}

  createGithubArtifact:
    if: false && github.event_name == 'pull_request' && contains(fromJSON('["opened", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    steps:
      - name: Add default Github artifact variables and secrets
        run: |
          touch .env.artifact
          echo REQUIRE_ANOTHER_DB_RESET="false" >> .env.artifact
          echo SEMI_SECRET_VALUE="semi-secret" >> .env.artifact

      - name: Upload Github artifact variables
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          path: .env.artifact

  testGithubArtifact:
    if: false && always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [createGithubArtifact]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Determine the run-id of the last workflow run
        id: get_last_workflow_run_id
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          LAST_WORKFLOW_RUN=$(gh run list -b ${{ github.head_ref }} -s completed -L 1 --json databaseId -q ".[].databaseId")
          echo "last_workflow_run=$LAST_WORKFLOW_RUN" >> $GITHUB_OUTPUT

      - name: Download Github artifact variables
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          run-id: ${{ steps.get_last_workflow_run_id.outputs.last_workflow_run }}

      - name: Read downloaded Github artifact
        id: artifact-output
        uses: falti/dotenv-action@v1.0.4
        with:
          path: .env.artifact

      - name: Reference Github artifact variable
        run: |
          echo "${{ steps.artifact-output.outputs.REQUIRE_ANOTHER_DB_RESET }}"

      - name: Update Github artifact variable
        id: update_artifact_variable
        run: |
          # Invert REQUIRE_ANOTHER_DB_RESET
          if [ "${{ steps.artifact-output.outputs.REQUIRE_ANOTHER_DB_RESET }}" = "true" ]; then
            REQUIRE_ANOTHER_DB_RESET=false
          else
            REQUIRE_ANOTHER_DB_RESET=true
          fi
          # Push the new variable back to the .env.artifact
          # By deleting the existing entry (if there is one)
          sed -e /REQUIRE_ANOTHER_DB_RESET/d .env.artifact > tmpfile && mv tmpfile .env.artifact
          # ..and re-adding the updated value
          echo "REQUIRE_ANOTHER_DB_RESET=$REQUIRE_ANOTHER_DB_RESET" >> .env.artifact
          # Allow subsequent steps to access this updated value
          echo "require_another_db_reset=$REQUIRE_ANOTHER_DB_RESET" >> $GITHUB_OUTPUT

      - name: Upload Github artifact variables
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PR_ID }}_env
          path: .env.artifact
          overwrite: true

  createGithubCache:
    if: false && github.event_name == 'pull_request' && contains(fromJSON('["opened", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    steps:
      - name: Add default Github cache variables and secrets
        run: |
          touch .env.cache
          echo APP_BRANCH_EXISTS="false" >> .env.cache
          echo OTHER_SEMI_SECRET_VALUE="other-semi-secret" >> .env.cache

      - name: Save Github cache variables
        uses: actions/cache/save@v4
        with:
          path: .env.cache
          key: ${{ env.PR_ID }}_env

  testGithubCache:
    if: false && always() && github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [createGithubCache]
    runs-on: ubuntu-latest
    steps:
      - name: Restore Github cache variables
        uses: actions/cache/restore@v4
        with:
          path: .env.cache
          key: ${{ env.PR_ID }}_env

      - name: Read downloaded Github cache
        id: cache-output
        uses: falti/dotenv-action@v1.0.4
        with:
          path: .env.cache

      - name: Reference Github cache variable
        run: |
          echo "${{ steps.cache-output.outputs.APP_BRANCH_EXISTS }}"

      - name: Update Github cache variable
        id: update_cache_variable
        run: |
          # Invert APP_BRANCH_EXISTS
          if [ "${{ steps.cache-output.outputs.APP_BRANCH_EXISTS }}" = "true" ]; then
            APP_BRANCH_EXISTS=false
          else
            APP_BRANCH_EXISTS=true
          fi
          # Push the new variable back to the .env.cache
          # By deleting the existing entry (if there is one)
          sed -e /APP_BRANCH_EXISTS/d .env.cache > tmpfile && mv tmpfile .env.cache
          # ..and re-adding the updated value
          echo "APP_BRANCH_EXISTS=$APP_BRANCH_EXISTS" >> .env.cache
          # Allow subsequent steps to access this updated value
          echo "APP_BRANCH_EXISTS=$APP_BRANCH_EXISTS" >> $GITHUB_OUTPUT

      # This is cache's main pitfall: Only one version of a cache may exist at a time, so trying to save over an existing cache will fail.
      - name: Save the updated Github cache variables
        uses: actions/cache/save@v4
        with:
          path: .env.cache
          key: ${{ env.PR_ID }}_env

  destroyGithubCache:
    if: false && github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Cleanup PR cache
        env:
          GH_TOKEN: ${{ secrets.ENVIRONMENT_TOKEN }}
        run: |
          gh cache delete ${{ env.PR_ID }}_env
